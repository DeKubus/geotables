import unittest
import json
from unittest import mock
import geotables

_DUMMY_CONTENT = (
    "# Generated by iptables-save v1.8.4 on Mon May 24 14:11:29 2021\n"
    "*nat\n"
    ":PREROUTING ACCEPT [72:15749]\n"
    ":INPUT ACCEPT [38:13365]\n"
    ":OUTPUT ACCEPT [62:23532]\n"
    ":POSTROUTING ACCEPT [66:23893]\n"
    ":DOCKER - [0:0]\n"
    "-A PREROUTING -m addrtype --dst-type LOCAL -j DOCKER\n"
    "-A OUTPUT ! -d 127.0.0.0/8 -m addrtype --dst-type LOCAL -j DOCKER\n"
    "-A POSTROUTING -s 172.17.0.0/16 ! -o docker0 -j MASQUERADE\n"
    "*filter\n:INPUT\n"
    "-A INPUT -s 42.42.0.0/12 -i eno1 -m comment --comment 'Added by geotables.py' -j ACCEPT\n"
    "-A DOCKER-ISOLATION-STAGE-2 -o br-9dfdfa326786 -j DROP\n"
    "-A DOCKER-ISOLATION-STAGE-2 -j RETURN\n"
    "-A DOCKER-USER -s 44.44.0.0/12 -i eno1 -m comment --comment 'Added by geotables.py' -j ACCEPT\n"
    "-A DOCKER-USER -p tcp -m multiport --dports 80,443 -j f2b-traefik_404\n"
    "-A DOCKER-USER -j RETURN\n"
    "-A f2b-traefik_404 -j RETURN\n"
    "COMMIT\n"
    "# Completed on Mon May 24 14:11:29 2021\n"
)


class TestBoundaryFinding(unittest.TestCase):
    def test_filter_table_start_index(self):
        result = geotables._filter_table_start(_DUMMY_CONTENT)
        self.assertEqual(result, 390)

    def test_filter_table_end_index(self):
        result = geotables._filter_table_end(_DUMMY_CONTENT)
        self.assertEqual(result, 789)

    def test_filter_table_contents(self):
        expected = (
            "-A INPUT -s 42.42.0.0/12 -i eno1 -m comment --comment 'Added by geotables.py' -j ACCEPT\n"
            "-A DOCKER-ISOLATION-STAGE-2 -o br-9dfdfa326786 -j DROP\n"
            "-A DOCKER-ISOLATION-STAGE-2 -j RETURN\n"
            "-A DOCKER-USER -s 44.44.0.0/12 -i eno1 -m comment --comment 'Added by geotables.py' -j ACCEPT\n"
            "-A DOCKER-USER -p tcp -m multiport --dports 80,443 -j f2b-traefik_404\n"
            "-A DOCKER-USER -j RETURN\n"
            "-A f2b-traefik_404 -j RETURN\n"
        )
        result = geotables._filter_table_content(_DUMMY_CONTENT)
        self.assertEqual(result, expected)


class TestFiltering(unittest.TestCase):
    _DUMMY_CONTENT_IFACE_FIRST = (
        "# Generated by iptables-save v1.8.4 on Mon May 24 14:11:29 2021\n"
        "*nat\n"
        ":PREROUTING ACCEPT [72:15749]\n"
        ":INPUT ACCEPT [38:13365]\n"
        ":OUTPUT ACCEPT [62:23532]\n"
        ":POSTROUTING ACCEPT [66:23893]\n"
        ":DOCKER - [0:0]\n"
        "-A PREROUTING -m addrtype --dst-type LOCAL -j DOCKER\n"
        "-A OUTPUT ! -d 127.0.0.0/8 -m addrtype --dst-type LOCAL -j DOCKER\n"
        "-A POSTROUTING -s 172.17.0.0/16 ! -o docker0 -j MASQUERADE\n"
        "*filter\n:INPUT\n"
        "-A INPUT -i eno1 -s 42.42.0.0/12 -m comment --comment 'Added by geotables.py' -j ACCEPT\n"
        "-A DOCKER-ISOLATION-STAGE-2 -o br-9dfdfa326786 -j DROP\n"
        "-A DOCKER-ISOLATION-STAGE-2 -j RETURN\n"
        "-A DOCKER-USER -i eno1 -s 44.44.0.0/12 -m comment --comment 'Added by geotables.py' -j ACCEPT\n"
        "-A DOCKER-USER -p tcp -m multiport --dports 80,443 -j f2b-traefik_404\n"
        "-A DOCKER-USER -j RETURN\n"
        "-A f2b-traefik_404 -j RETURN\n"
        "COMMIT\n"
        "# Completed on Mon May 24 14:11:29 2021\n"
    )

    def test_ipv4_input_interface_first(self):
        result = geotables._filter_existing(
            iptables_content=self._DUMMY_CONTENT_IFACE_FIRST,
            interface="eno1",
            ipvx=["42.42.0.0/12", "43.43.0.0/12", "44.44.0.0/12"],
            chain="INPUT",
        )
        self.assertEqual(result, ["43.43.0.0/12", "44.44.0.0/12"])

    def test_ipv4_input_interface_last(self):
        result = geotables._filter_existing(
            iptables_content=_DUMMY_CONTENT,
            interface="eno1",
            ipvx=["42.42.0.0/12", "43.43.0.0/12", "44.44.0.0/12"],
            chain="INPUT",
        )
        self.assertEqual(result, ["43.43.0.0/12", "44.44.0.0/12"])

    def test_ipv4_docker_user_interface_first(self):
        result = geotables._filter_existing(
            iptables_content=self._DUMMY_CONTENT_IFACE_FIRST,
            interface="eno1",
            ipvx=["42.42.0.0/12", "43.43.0.0/12", "44.44.0.0/12"],
            chain="DOCKER-USER",
        )
        self.assertEqual(result, ["42.42.0.0/12", "43.43.0.0/12"])

    def test_ipv4_docker_user_interface_last(self):
        result = geotables._filter_existing(
            iptables_content=_DUMMY_CONTENT,
            interface="eno1",
            ipvx=["42.42.0.0/12", "43.43.0.0/12", "44.44.0.0/12"],
            chain="DOCKER-USER",
        )
        self.assertEqual(result, ["42.42.0.0/12", "43.43.0.0/12"])

    def test_ipv4_input_different_interface(self):
        result = geotables._filter_existing(
            iptables_content=_DUMMY_CONTENT,
            interface="eno2",
            ipvx=["42.42.0.0/12", "43.43.0.0/12", "44.44.0.0/12"],
            chain="INPUT",
        )
        self.assertEqual(result, ["42.42.0.0/12", "43.43.0.0/12", "44.44.0.0/12"])

    def test_ipv4_docker_user_different_interface(self):
        result = geotables._filter_existing(
            iptables_content=_DUMMY_CONTENT,
            interface="eno2",
            ipvx=["42.42.0.0/12", "43.43.0.0/12", "44.44.0.0/12"],
            chain="DOCKER-USER",
        )
        self.assertEqual(result, ["42.42.0.0/12", "43.43.0.0/12", "44.44.0.0/12"])


class TestMerging(unittest.TestCase):
    def mocked_requests_get(*args, **kwargs):
        class MockResponse:
            def __init__(self, json_data, status_code):
                self.json_data = json.loads(json_data)
                self.status_code = status_code

            def json(self):
                return self.json_data

        if "resource=de" in args[0]:
            with open("unittests/ripe_input_de.json", "r") as ripe_file:
                ripe_content = ripe_file.read()
            return MockResponse(ripe_content, 200)
        if "resource=us" in args[0]:
            with open("unittests/ripe_input_us.json", "r") as ripe_file:
                ripe_content = ripe_file.read()
            return MockResponse(ripe_content, 200)

        return MockResponse(None, 404)

    @mock.patch("requests.get", side_effect=mocked_requests_get)
    def test_merge_both(self, mock_get):
        v4, v6 = geotables._load_ranges(["de", "us"])
        self.assertGreaterEqual(
            len(v4), 65000
        )  # current amount of us blocks: 57170, amount of de blocks: 10072
        self.assertGreaterEqual(
            len(v6), 8000
        )  # current amount of us blocks: 6793, amount of de blocks: 2704

    @mock.patch("requests.get", side_effect=mocked_requests_get)
    def test_merge_de(self, mock_get):
        v4, v6 = geotables._load_ranges(["de"])
        self.assertLess(
            len(v4), 20000
        )  # current amount of us blocks: 57170, amount of de blocks: 10072
        self.assertLess(
            len(v6), 12000
        )  # current amount of us blocks: 6793, amount of de blocks: 2704


class TestDefaultDrop(unittest.TestCase):
    def test_default_drop(self):
        result = geotables._add_default_drop(
            iptables_content=_DUMMY_CONTENT, interface="eno1", chain="INPUT"
        )
        self.assertTrue(
            result.endswith(
                '\n-A INPUT -i eno1 -m comment --comment "Added by geotables.py" -j DROP\nCOMMIT\n# Completed on Mon May 24 14:11:29 2021\n'
            )
        )


class TestWhitelistBuilding(unittest.TestCase):
    def test_whitelist(self):
        blocks = ["10.11.0.0/12", "10.12.0.0/12", "10.13.0.0/12"]
        result = geotables._process_list(
            iptables_content=_DUMMY_CONTENT,
            ip_list=blocks,
            interface="eno1",
            chain="INPUT",
        )
        for block in blocks:
            self.assertIn(block, result)
            self.assertLess(
                result.index("*filter\n:INPUT\n"),
                result.index(block),
                "Block added before start of filter table",
            )
            self.assertLess(
                result.index(block),
                result.index("COMMIT\n"),
                "Block added after COMMIT",
            )


class TestLoopback(unittest.TestCase):
    def test_loopback(self):
        result = geotables._allow_loopback(
            iptables_content=_DUMMY_CONTENT, chain="INPUT"
        )
        expected = (
            '-A INPUT -i lo -m comment --comment "Added by geotables.py" -j ACCEPT'
        )
        self.assertIn(expected, result)
        self.assertLess(
            result.index("*filter\n:INPUT\n"),
            result.index(expected),
            "Loopback added before start of filter table",
        )
        self.assertLess(
            result.index(expected),
            result.index("COMMIT\n"),
            "Loopback added after COMMIT",
        )


if __name__ == "__main__":
    unittest.main()